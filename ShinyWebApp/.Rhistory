print("hello world")
print("hello world",quote=FALSE)
print("hello world")
print("hello world")
cat("price per square foot is: ",price_per_sqft)
price_per_sqft <- house_price/house_area
price_per_sqft <- house_price / house_area
source("~/r_programs/first.R")
library(readr)
student_data <- read_csv("C:/Users/nayan/Downloads/student_data.csv")
View(student_data)
print(student_data)
source("~/r_programs/vector&lists.R")
print(missing_values)
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
clear()
clc
clrhash()
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
set.seed(123)
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
install.packages("ggplot2")
source("~/r_programs/vector&lists.R")
source("~/r_programs/vector&lists.R")
source("D:/coding/r_files/practivec.R")
# Storevaluesinvariables(numberofstringsonaninstrument)
num_guitar_strings<-6
num_mandolin_strings<-8
#Comparethenumberofstringsoneachinstrument
num_guitar_strings >num_mandolin_strings #returnslogicalvalueFALSE
num_guitar_strings !=num_mandolin_strings #returnslogicalvalueTRUE
#Equivalently,youcancomparevaluesthatarenotstoredinvariables
6 ==8#returnslogicalvalueFALSE
#Userelationaloperatorstocomparetwostrings
"mandolin">"guitar" #returnsTRUE(mcomesaftergalphabetically)
source("D:/coding/r_files/practivec.R")
View(get_mode)
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
vec_5 <- seq(2000, 2025, by = 5)
print(vec_5)
vec_5 <- seq(2000, 2025, 5)
print(vec_5)
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
print(people)
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
source("D:/coding/r_files/practivec.R")
library(readr)
rawdata <- read_csv("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/rawdata.csv")
View(rawdata)
source("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/03-Feb-2025-Module3_DataWranglingExercise.R")
install.packages("lubridate")
source("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/03-Feb-2025-Module3_DataWranglingExercise.R")
source("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/03-Feb-2025-Module3_DataWranglingExercise.R")
source("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/03-Feb-2025-Module3_DataWranglingExercise.R")
source("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/03-Feb-2025-Module3_DataWranglingExercise.R")
source("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/03-Feb-2025-Module3_DataWranglingExercise.R")
library(readr)
rawdata <- read_csv("C:/Users/nayan/Downloads/VIT Downloads/BCSE207L-Programming for Data Science/saravanguru/lab/rawdata.csv")
View(rawdata)
install.packages("gt")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
suppressPackageStartupMessages({
library(quantmod)
library(rvest)
library(dplyr)
library(purrr)  # Added for keep() function
library(lubridate)
library(readr)
library(pander)
})
scrape_sp500 <- function(url) {
page <- read_html(url)
table <- html_nodes(page, "table.wikitable")[[1]]
df <- html_table(table, fill = TRUE)
# Check column names
print("S&P 500 Column Names:")
print(colnames(df))
# Select relevant columns
sp500_data <- df %>%
select(
Symbol = Symbol,
`GICS Sector` = `GICS Sector`,
`GICS Sub-Industry` = `GICS Sub-Industry`,
`Headquarters Location` = `Headquarters Location`,
`Date added` = `Date added`,
CIK = CIK,
Founded = Founded
)
return(sp500_data)
}
# Function to scrape DJIA component companies
scrape_djia <- function(url) {
page <- read_html(url)
# Find the correct table for DJIA component companies
tables <- html_nodes(page, "table.wikitable")
for (i in seq_along(tables)) {
df <- html_table(tables[[i]], fill = TRUE)
if ("Symbol" %in% colnames(df)) {
print("DJIA Component Companies Table Found:")
print(colnames(df))
break
}
}
# Select relevant columns
djia_data <- df %>%
select(
Company = Company,
Exchange = Exchange,
Symbol = Symbol,
Industry = Industry,
`Date added` = `Date added`,
Notes = Notes,
`Index weighting` = `Index weighting`
)
return(djia_data)
}
# Scrape S&P 500 data
sp500_data <- scrape_sp500("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")
# Define URLs
url_sp500 <- "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
url_market_cap <- "https://en.wikipedia.org/wiki/List_of_public_corporations_by_market_capitalization"
# Function to extract company names and symbols from a Wikipedia table
extract_company_data <- function(url, name_column, symbol_column = NULL) {
tryCatch({
page <- read_html(url)
table <- html_nodes(page, "table.wikitable")[[1]]  # Get first table
df <- html_table(table, fill = TRUE)
# Extract company names
companies <- df[[name_column]] %>% unique() %>% na.omit()
# Extract symbols if the column is provided
symbols <- if (!is.null(symbol_column)) {
df[[symbol_column]] %>% unique() %>% na.omit()
} else {
rep(NA_character_, length(companies))  # Use NA_character_ for consistency
}
# Return a data frame with names and symbols
data.frame(Company_Name = companies, Symbol = symbols, stringsAsFactors = FALSE)
}, error = function(e) {
message("Error accessing URL: ", url)
return(data.frame(Company_Name = character(0), Symbol = character(0)))
})
}
# Extract S&P 500 companies (using 'Security' for names and 'Symbol' for tickers)
sp500_data <- extract_company_data(url_sp500, "Security", "Symbol")
# Extract market cap companies (using 'Name' for names, no symbol column)
market_cap_data <- extract_company_data(url_market_cap, "Name")
# Combine the data
all_data <- bind_rows(sp500_data, market_cap_data)
# Deduplicate based on company name
all_data <- all_data %>%
distinct(Company_Name, .keep_all = TRUE)
pander(head(all_data, 5))
# Save as CSV
write.csv(all_data, "company_names_and_symbols.csv", row.names = FALSE)
message("CSV file saved successfully with ", nrow(all_data), " companies.")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error=TRUE, echo = TRUE, warning = FALSE, message = FALSE)
# Loading necessary libraries
suppressPackageStartupMessages({
library(tidyverse)    # Data manipulation & visualization
library(lubridate)    # Handling dates
library(ggplot2)      # For visualization
library(pander)       # Pretty printing
library(textdata)     # Sentiment analysis
library(syuzhet)      # Sentiment scores
})
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
suppressPackageStartupMessages({
library(quantmod)
library(rvest)
library(dplyr)
library(purrr)  # Added for keep() function
library(lubridate)
library(readr)
library(pander)
})
install.packages("shiny")
install.packages("DT")
install.packages("ggplot2")
install.packages("dplyr")
library(shiny); runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R')
View(confusion_matrix)
runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R')
runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R')
install.packages("rsconnect")
getwd()
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R")
library(rsconnect)
rsconnect::setAccountInfo(name='yash-nayan-22bds0274',
token='E4850DDD525573A15F45291D8631F341',
secret='uuyygABUC9O4CIxKCH8WCqTZHWQyENuCmGe8QAwH')
rsconnect::deployApp('D:\VIT-Vellore\22BDS0274-Yash-Nayan\coding\R-lab\final-project\shiny_dashboard.R')
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R")
setwd("D:\\VIT-Vellore\\22BDS0274-Yash-Nayan\\coding\\R-lab\\final-project\\shiny_dashboard.R")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/final-project/shiny_dashboard.R")
str(flights)
data("flights")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/practice_ass3/test1/t.r")
data("flights")
str(flights)
summary(flights)
delayed_flights <- flights %>%
filter(dep_delay > 120)
head(delayed_flights)
selected_flights <- flights %>%
select(flight, origin, dest, dep_delay)
head(selected_flights)
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/practice_ass3/test1/t.r")
knitr::opts_chunk$set(echo = TRUE)
# Stock Price Distribution
ggplot(stock_data, aes(x = avg_close)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Stock Price Distribution", x = "Closing Price", y = "Frequency") +
theme_minimal()
colnames(stock_data)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load dataset
stock_data <- read.csv("final_merged_dataset.csv")
# Stock Price Distribution
ggplot(stock_data, aes(x = Closing_Price)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Stock Price Distribution", x = "Closing Price", y = "Frequency") +
theme_minimal()
# Sector-wise Performance
ggplot(stock_data, aes(x = GICS_Sector, y = Closing_Price, fill = GICS_Sector)) +
geom_boxplot() +
labs(title = "Sector-wise Performance", x = "Sector", y = "Average Closing Price") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Load dataset
stock_data <- read.csv("cleaned_stock_data_updated.csv")
# Stock Price Distribution
ggplot(stock_data, aes(x = Closing_Price)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Stock Price Distribution", x = "Closing Price", y = "Frequency") +
theme_minimal()
# Sector-wise Performance
ggplot(stock_data, aes(x = GICS_Sector, y = Closing_Price, fill = GICS_Sector)) +
geom_boxplot() +
labs(title = "Sector-wise Performance", x = "Sector", y = "Average Closing Price") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Most Volatile Stocks
ggplot(stock_data, aes(x = reorder(Symbol, -volatility_pct), y = volatility_pct, fill = volatility_pct)) +
geom_bar(stat = "identity") +
labs(title = "Most Volatile Stocks", x = "Stock Symbol", y = "Volatility Percentage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(stock_data, aes(x = Closing_Price)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black", alpha = 0.7) +
labs(title = "Stock Price Distribution", x = "Closing Price", y = "Frequency") +
xlim(0, quantile(stock_data$Closing_Price, 0.99, na.rm = TRUE)) +  # Trim extreme outliers
theme_minimal()
ggplot(stock_data, aes(x = reorder(GICS_Sector, Closing_Price, median, na.rm = TRUE),
y = Closing_Price, fill = GICS_Sector)) +
geom_boxplot(outlier.shape = NA) +  # Hides extreme outliers
coord_cartesian(ylim = c(0, quantile(stock_data$Closing_Price, 0.99, na.rm = TRUE))) +
labs(title = "Sector-wise Performance", x = "Sector", y = "Average Closing Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 30, hjust = 1), legend.position = "none")
ggplot(stock_data %>% arrange(desc(volatility_pct)) %>% head(10),
aes(x = reorder(Symbol, -volatility_pct), y = volatility_pct, fill = volatility_pct)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Top 10 Most Volatile Stocks", x = "Stock Symbol", y = "Volatility Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(stock_data, aes(x = reorder(GICS_Sector, Closing_Price, median, na.rm = TRUE),
y = Closing_Price, fill = GICS_Sector)) +
geom_boxplot(outlier.shape = NA) +  # Removes extreme outliers
coord_cartesian(ylim = c(0, quantile(stock_data$Closing_Price, 0.99, na.rm = TRUE))) +
labs(title = "Sector-wise Performance", x = "Sector", y = "Closing Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 30, hjust = 1), legend.position = "none")
ggplot(stock_data, aes(x = Trade_Volume, y = Closing_Price, color = GICS_Sector)) +
geom_point(alpha = 0.5, size = 2) +  # Adds scatter points
scale_x_log10() +  # Log scale for better distribution
geom_smooth(method = "lm", se = FALSE, color = "black") +  # Adds trend line
labs(title = "Stock Price vs Trade Volume", x = "Trade Volume (log scale)", y = "Closing Price") +
theme_minimal()
ggplot(stock_data, aes(x = Trade_Volume, y = Closing_Price, color = GICS_Sector)) +
geom_point(alpha = 1.0, size = 2) +  # Adds scatter points
scale_x_log10() +  # Log scale for better distribution
geom_smooth(method = "lm", se = FALSE, color = "black") +  # Adds trend line
labs(title = "Stock Price vs Trade Volume", x = "Trade Volume (log scale)", y = "Closing Price") +
theme_minimal()
ggplot(stock_data, aes(x = Trade_Volume, y = Closing_Price, color = GICS_Sector)) +
geom_point(alpha = 1.0, size = 9) +  # Adds scatter points
scale_x_log10() +  # Log scale for better distribution
geom_smooth(method = "lm", se = FALSE, color = "black") +  # Adds trend line
labs(title = "Stock Price vs Trade Volume", x = "Trade Volume (log scale)", y = "Closing Price") +
theme_minimal()
ggplot(stock_data, aes(x = Trade_Volume, y = Closing_Price, color = GICS_Sector)) +
geom_point(alpha = 0.5, size = 2) +  # Adds scatter points
scale_x_log90() +  # Log scale for better distribution
geom_smooth(method = "lm", se = FALSE, color = "black") +  # Adds trend line
labs(title = "Stock Price vs Trade Volume", x = "Trade Volume (log scale)", y = "Closing Price") +
theme_minimal()
ggplot(stock_data, aes(x = Trade_Volume, y = Closing_Price, color = GICS_Sector)) +
geom_point(alpha = 0.5, size = 2) +  # Adds scatter points
scale_x_log10() +  # Log scale for better distribution
geom_smooth(method = "lm", se = FALSE, color = "black") +  # Adds trend line
labs(title = "Stock Price vs Trade Volume",
x = "Trade Volume (log scale)",
y = "Closing Price") +
annotation_logticks(sides = "b") +  # Adds log ticks on the bottom axis
theme_minimal()
ggplot(stock_data, aes(x = volatility_pct, y = Closing_Price, color = GICS_Sector)) +
geom_point(alpha = 0.6, size = 2) +
labs(title = "Volatility vs Stock Price", x = "Volatility (%)", y = "Closing Price") +
theme_minimal()
plot_scatter <- ggplot(stock_data, aes(x = price_change_pct, y = volatility_pct, color = price_sentiment)) +
geom_point(alpha = 0.7, size = 3) +
scale_color_manual(values = sentiment_colors) +
geom_text(aes(label = Company_Name), color = "black", hjust = 1.1, vjust = 0.5, check_overlap = TRUE, size = 3) +
labs(title = "Price Change vs. Volatility by Company",
x = "Price Change (%)",
y = "Volatility (%)") +
theme_minimal()
# Defining sentiment colors
sentiment_colors <- c(
"Positive" = "#2ECC71",             # Green
"Positive but Volatile" = "#27AE60",  # Darker Green
"Negative" = "#E74C3C",             # Red
"Negative and Volatile" = "#C0392B",  # Darker Red
"Neutral" = "light blue"               # blue
)
# 1. Top 10 Best Performing Companies by Price Change Percentage
top_companies <- stock_data %>%
arrange(desc(price_change_pct)) %>%
slice_head(n = 10)
plot_top <- ggplot(top_companies, aes(x = reorder(Company_Name, price_change_pct), y = price_change_pct, fill = price_sentiment)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = sentiment_colors) +
coord_flip() +
labs(title = "Top 10 Best Performing Companies",
x = "Company",
y = "Price Change (%)") +
theme_minimal()
print(plot_top)
# 2. Top 10 Worst Performing Companies by Price Change Percentage
worst_companies <- stock_data %>%
arrange(price_change_pct) %>%
slice_head(n = 10)
plot_worst <- ggplot(worst_companies, aes(x = reorder(Company_Name, -price_change_pct), y = price_change_pct, fill = price_sentiment)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = sentiment_colors) +
coord_flip() +
labs(title = "Top 10 Worst Performing Companies",
x = "Company",
y = "Price Change (%)") +
theme_minimal()
print(plot_worst)
# 3. Scatter Plot: Price Change vs. Volatility
plot_scatter <- ggplot(stock_data, aes(x = price_change_pct, y = volatility_pct, color = price_sentiment)) +
geom_point(alpha = 0.7, size = 3) +
scale_color_manual(values = sentiment_colors) +
geom_text(aes(label = Company_Name), color = "black", hjust = 1.1, vjust = 0.5, check_overlap = TRUE, size = 3) +
labs(title = "Price Change vs. Volatility by Company",
x = "Price Change (%)",
y = "Volatility (%)") +
theme_minimal()
print(plot_scatter)
# 4. Compute Investibility Score
# Load required libraries
library(RSQLite)
package.install("RSQLite")
install.packages("RSQLite")
install.packages("DBI")
install.packages("gridExtra")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/practice_ass3/test1/t.r")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/cat-2/connecting_mysql.R")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/cat-2/connecting_mysql.R")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/cat-2/connecting_mysql.R")
source("D:/VIT-Vellore/22BDS0274-Yash-Nayan/coding/R-lab/cat-2/connecting_mysql.R")
library(shiny); runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/digital_assignment2/shiny_web_app.R')
runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/digital_assignment2/shiny_web_app.R')
runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/digital_assignment2/shiny_web_app.R')
setwd("D:/VIT-Vellore/22BDS0274-Yash-Nayan/digital_assignment2/")
shiny::runApp("shiny_web_app.R")
runApp('shiny_web_app.R')
runApp('shiny_web_app.R')
runApp('shiny_web_app.R')
runApp('test.r')
runApp('shiny_web_app.R')
runApp('test3.R')
setwd("D:/VIT-Vellore/22BDS0274-Yash-Nayan/digital_assignment2/")
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('test3.R')
runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/ShinyWebApp/WebApp_StockData.R')
runApp('D:/VIT-Vellore/22BDS0274-Yash-Nayan/ShinyWebApp/WebApp_StockData.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='yash-nayan-22bds0274',
token='E4850DDD525573A15F45291D8631F341',
secret='uuyygABUC9O4CIxKCH8WCqTZHWQyENuCmGe8QAwH')
getwd()
setwd("D:/VIT-Vellore/22BDS0274-Yash-Nayan/ShinyWebApp/")
getwd()
library(rsconnect)
rsconnect::deployApp(appPrimaryDoc = "WebApp_StockData.R")
rsconnect::deployApp(appPrimaryDoc = "WebApp_StockData.R")
